<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
if global.rm = 2 {
ground_spawner_bis3()
}
if global.rm = 3 {
ground_spawner_bis4()
}
if global.rm = 4 {
ground_spawner_bis5()
}
if global.rm = 5 {
ground_spawner_bis6()
}
if global.rm = 6 {
ground_spawner_bis7()
}
if global.rm = 7 {
ground_spawner_bis8()
}
if global.rm = 8 {
ground_spawner_bis9()
}
if global.rm = 9 {
ground_spawner_bis10()
}


a = 0 ; b = 0 ; c = 0 ; t = 0;
//ground_spawner_music_stretch()

/// song 1 beat sync
/*
n = 70
k = room_width/n
j = round(k*0.25)
l = round(k * 0.5)
m = round(k * 0.75)
i= 0

var i
for
( i = 0; i &lt; k+1; i += 1)
{
instance_create(0+(n  *i),4900,groundBis); 
}

/*
//medium

instance_create(0+(n  *i),  384,groundBis); i+=1;
instance_create(0+(n  *i),  384,groundBis); i+=1;
instance_create(0+(n  *i),  384,groundBis); i+=1;
instance_create(0+(n  *i),  384,groundBis); i+=1;
instance_create(0+(n  *i),  384,groundBis); i+=1;
instance_create(0+(n  *i),  384,groundBis); i+=1;
instance_create(0+(n  *i),  384,groundBis); i+=1;
instance_create(0+(n  *i),  384,groundBis); i+=1;
 
instance_create(0+(n  *i),  384,groundBis); i+=1;
instance_create(0+(n  *i),  384,groundBis); i+=1;
instance_create(0+(n  *i),  384,groundBis); i+=1;
instance_create(0+(n  *i),  384,groundBis); i+=1;
instance_create(0+(n  *i),  384,groundBis); i+=1;
instance_create(0+(n  *i),  384,groundBis); i+=1;
instance_create(0+(n  *i),  384,groundBis); i+=1;
instance_create(0+(n  *i),  384,groundBis); i+=1;
 
instance_create(0+(n  *i),  384,groundBis); i+=1;
instance_create(0+(n  *i),  384,groundBis); i+=1;
instance_create(0+(n  *i),  384,groundBis); i+=1;
instance_create(0+(n  *i),  384,groundBis); i+=1;
instance_create(0+(n  *i),  384,groundBis); i+=1;
instance_create(0+(n  *i),  384,groundBis); i+=1;
instance_create(0+(n  *i),  384,groundBis); i+=1;
instance_create(0+(n  *i),  384,groundBis); i+=1;
 
instance_create(0+(n  *i),  384,groundBis); i+=1;
instance_create(0+(n  *i),  384,groundBis); i+=1;
instance_create(0+(n  *i),  384,groundBis); i+=1;
instance_create(0+(n  *i),  384,groundBis); i+=1;
instance_create(0+(n  *i),  384,groundBis); i+=1;
instance_create(0+(n  *i),  384,groundBis); i+=1;
instance_create(0+(n  *i),  384,groundBis); i+=1;
instance_create(0+(n  *i),  384,groundBis); i+=1;
 
instance_create(0+(n  *i),  384,groundBis); i+=1;
instance_create(0+(n  *i),  384,groundBis); i+=1;
instance_create(0+(n  *i),  384,groundBis); i+=1;
instance_create(0+(n  *i),  384,groundBis); i+=1;
instance_create(0+(n  *i),  384,groundBis); i+=1;
instance_create(0+(n  *i),  384,groundBis); i+=1;
instance_create(0+(n  *i),  384,groundBis); i+=1;
instance_create(0+(n  *i),  384,groundBis); i+=1;
 
instance_create(0+(n  *i),  384,groundBis); i+=1;
instance_create(0+(n  *i),  384,groundBis); i+=1;
instance_create(0+(n  *i),  384,groundBis); i+=1;
instance_create(0+(n  *i),  384,groundBis); i+=1;
instance_create(0+(n  *i),  384,groundBis); i+=1;
instance_create(0+(n  *i),  384,groundBis); i+=1;
instance_create(0+(n  *i),  384,groundBis); i+=1;
instance_create(0+(n  *i),  384,groundBis); i+=1;
 
instance_create(0+(n  *i),  384,groundBis); i+=1;
instance_create(0+(n  *i),  384,groundBis); i+=1;
instance_create(0+(n  *i),  384,groundBis); i+=1;
instance_create(0+(n  *i),  384,groundBis); i+=1;
instance_create(0+(n  *i),  384,groundBis); i+=1;
instance_create(0+(n  *i),  384,groundBis); i+=1;
instance_create(0+(n  *i),  384,groundBis); i+=1;
instance_create(0+(n  *i),  384,groundBis); i+=1;
 
instance_create(0+(n  *i),  384,groundBis); i+=1;
instance_create(0+(n  *i),  384,groundBis); i+=1;
instance_create(0+(n  *i),  384,groundBis); i+=1;
instance_create(0+(n  *i),  384,groundBis); i+=1;
instance_create(0+(n  *i),  384,groundBis); i+=1;
instance_create(0+(n  *i),  384,groundBis); i+=1;
instance_create(0+(n  *i),  384,groundBis); i+=1;
instance_create(0+(n  *i),  384,groundBis); i+=1;
 
instance_create(0+(n  *i),  384,groundBis); i+=1;
instance_create(0+(n  *i),  384,groundBis); i+=1;
instance_create(0+(n  *i),  384,groundBis); i+=1;
instance_create(0+(n  *i),  384,groundBis); i+=1;
instance_create(0+(n  *i),  384,groundBis); i+=1;
instance_create(0+(n  *i),  384,groundBis); i+=1;
instance_create(0+(n  *i),  384,groundBis); i+=1;
instance_create(0+(n  *i),  384,groundBis); i+=1;
 
instance_create(0+(n  *i),  384,groundBis); i+=1;
instance_create(0+(n  *i),  384,groundBis); i+=1;
instance_create(0+(n  *i),  384,groundBis); i+=1;
instance_create(0+(n  *i),  384,groundBis); i+=1;
instance_create(0+(n  *i),  384,groundBis); i+=1;
instance_create(0+(n  *i),  384,groundBis); i+=1;
instance_create(0+(n  *i),  384,groundBis); i+=1;
instance_create(0+(n  *i),  384,groundBis); i+=1;
 
instance_create(0+(n  *i),  384,groundBis); i+=1;
instance_create(0+(n  *i),  384,groundBis); i+=1;
instance_create(0+(n  *i),  384,groundBis); i+=1;
instance_create(0+(n  *i),  384,groundBis); i+=1;
instance_create(0+(n  *i),  384,groundBis); i+=1;
instance_create(0+(n  *i),  384,groundBis); i+=1;
instance_create(0+(n  *i),  384,groundBis); i+=1;
instance_create(0+(n  *i),  384,groundBis); i+=1;
 
instance_create(0+(n  *i),  384,groundBis); i+=1;
instance_create(0+(n  *i),  384,groundBis); i+=1;
instance_create(0+(n  *i),  384,groundBis); i+=1;
instance_create(0+(n  *i),  384,groundBis); i+=1;
instance_create(0+(n  *i),  384,groundBis); i+=1;
instance_create(0+(n  *i),  384,groundBis); i+=1;
instance_create(0+(n  *i),  384,groundBis); i+=1;
instance_create(0+(n  *i),  384,groundBis); i+=1;
 
instance_create(0+(n  *i),  384,groundBis); i+=1;
instance_create(0+(n  *i),  384,groundBis); i+=1;
instance_create(0+(n  *i),  384,groundBis); i+=1;
instance_create(0+(n  *i),  384,groundBis); i+=1;
instance_create(0+(n  *i),  384,groundBis); i+=1;
instance_create(0+(n  *i),  384,groundBis); i+=1;
instance_create(0+(n  *i),  384,groundBis); i+=1;
instance_create(0+(n  *i),  384,groundBis); i+=1;
 
instance_create(0+(n  *i),  384,groundBis); i+=1;
instance_create(0+(n  *i),  384,groundBis); i+=1;
instance_create(0+(n  *i),  384,groundBis); i+=1;
instance_create(0+(n  *i),  384,groundBis); i+=1;
instance_create(0+(n  *i),  384,groundBis); i+=1;
instance_create(0+(n  *i),  384,groundBis); i+=1;
instance_create(0+(n  *i),  384,groundBis); i+=1;
instance_create(0+(n  *i),  384,groundBis); i+=1;
 
instance_create(0+(n  *i),  384,groundBis); i+=1;
instance_create(0+(n  *i),  384,groundBis); i+=1;
instance_create(0+(n  *i),  384,groundBis); i+=1;
instance_create(0+(n  *i),  384,groundBis); i+=1;
instance_create(0+(n  *i),  384,groundBis); i+=1;
instance_create(0+(n  *i),  384,groundBis); i+=1;
instance_create(0+(n  *i),  384,groundBis); i+=1;
instance_create(0+(n  *i),  384,groundBis); i+=1;
 
instance_create(0+(n  *i),  384,groundBis); i+=1;
instance_create(0+(n  *i),  384,groundBis); i+=1;
instance_create(0+(n  *i),  384,groundBis); i+=1;
instance_create(0+(n  *i),  384,groundBis); i+=1;
instance_create(0+(n  *i),  384,groundBis); i+=1;
instance_create(0+(n  *i),  384,groundBis); i+=1;
instance_create(0+(n  *i),  384,groundBis); i+=1;
instance_create(0+(n  *i),  384,groundBis); i+=1;
 
instance_create(0+(n  *i),  384,groundBis); i+=1;
instance_create(0+(n  *i),  384,groundBis); i+=1;
instance_create(0+(n  *i),  384,groundBis); i+=1;
instance_create(0+(n  *i),  384,groundBis); i+=1;
instance_create(0+(n  *i),  384,groundBis); i+=1;
instance_create(0+(n  *i),  384,groundBis); i+=1;
instance_create(0+(n  *i),  384,groundBis); i+=1;
instance_create(0+(n  *i),  384,groundBis); i+=1;
 
instance_create(0+(n  *i),  384,groundBis); i+=1;
instance_create(0+(n  *i),  384,groundBis); i+=1;
instance_create(0+(n  *i),  384,groundBis); i+=1;
instance_create(0+(n  *i),  384,groundBis); i+=1;
instance_create(0+(n  *i),  384,groundBis); i+=1;
instance_create(0+(n  *i),  384,groundBis); i+=1;
instance_create(0+(n  *i),  384,groundBis); i+=1;
instance_create(0+(n  *i),  384,groundBis); i+=1;
 
instance_create(0+(n  *i),  384,groundBis); i+=1;
instance_create(0+(n  *i),  384,groundBis); i+=1;
instance_create(0+(n  *i),  384,groundBis); i+=1;
instance_create(0+(n  *i),  384,groundBis); i+=1;
instance_create(0+(n  *i),  384,groundBis); i+=1;
instance_create(0+(n  *i),  384,groundBis); i+=1;
instance_create(0+(n  *i),  384,groundBis); i+=1;
instance_create(0+(n  *i),  384,groundBis); i+=1;
 
instance_create(0+(n  *i),  384,groundBis); i+=1;
instance_create(0+(n  *i),  384,groundBis); i+=1;
instance_create(0+(n  *i),  384,groundBis); i+=1;
instance_create(0+(n  *i),  384,groundBis); i+=1;
instance_create(0+(n  *i),  384,groundBis); i+=1;
instance_create(0+(n  *i),  384,groundBis); i+=1;
instance_create(0+(n  *i),  384,groundBis); i+=1;
instance_create(0+(n  *i),  384,groundBis); i+=1;
 
instance_create(0+(n  *i),  384,groundBis); i+=1;
instance_create(0+(n  *i),  384,groundBis); i+=1;
instance_create(0+(n  *i),  384,groundBis); i+=1;
instance_create(0+(n  *i),  384,groundBis); i+=1;
instance_create(0+(n  *i),  384,groundBis); i+=1;
instance_create(0+(n  *i),  384,groundBis); i+=1;
instance_create(0+(n  *i),  384,groundBis); i+=1;
instance_create(0+(n  *i),  384,groundBis); i+=1;
 
instance_create(0+(n  *i),  384,groundBis); i+=1;
instance_create(0+(n  *i),  384,groundBis); i+=1;
instance_create(0+(n  *i),  384,groundBis); i+=1;
instance_create(0+(n  *i),  384,groundBis); i+=1;
instance_create(0+(n  *i),  384,groundBis); i+=1;
instance_create(0+(n  *i),  384,groundBis); i+=1;
instance_create(0+(n  *i),  384,groundBis); i+=1;
instance_create(0+(n  *i),  384,groundBis); i+=1;
*/


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>////music 
//audio_play_sound(totemy1, 10, true);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// wzor na obliczenie predkosci kota

//sprawdzic bmp utwory (ilosc bitow na minute) np. 87,6
//podzieli to przez ilosc sekund w minucie czyli 60 ;) dostajemy wtedy dlugosc beata na sekunde
//bpm (w przeliczeniu an sekundy = 1.46
//dlugosc beata w pikselach - 100 // to dlugosc standardowej dziuey w ziemi w trybie muzycznym, tego nie zmeiniamy
//ilosc stepow na sekunde - 30 // to tez stała (predkosc pokoju

//wzor na sugerowaną predkosc kota:
// x = beat na sekunde * długosc beata w pikselach (100)/ ilo stepw na sekunde(30)
//X  = (1.46 *100)/30
//X = 4.87

//dla utwory totemy1 sugerowana predkosc kota to 4.87 piksela na krok



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// checkpoint initialize
/*
if i = j 
{
global.hardship = 1
with instance_nearest(0+(n*i),384,objectTapBis){
instance_change(ground,true)}
instance_create(0+(n*i),345,checkpoint)

}
else if i = l 
{
global.hardship = 2
with instance_nearest(0+(n*i),384,objectTapBis){
instance_change(ground,true)}
instance_create(0+(n*i),345,checkpoint)
}
else if i = m
{
global.hardship = 3
with instance_nearest(0+(n*i),384,objectTapBis){
instance_change(ground,true)}
instance_create(0+(n*i),345,checkpoint)

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
