<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// READ THE STEP EVENT


// Creates the "Tween" button.
button_tween = bb_create(room_width*.75, room_height/2 + 150, "Tween", 30, font_lato, spr_button_orange, true);

// Sets the text colour of the button to c_white and the text alpha to 0.88
bb_set_color(button_tween, c_white, .88);

// Sets the width of the button to 200px (the default is autosize mode)
bb_set_width(button_tween, 200);




// Sets the variable tweens_array to -1. (check the step event for more info)
tweens_array = -1;





</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// STAGGER EXAMPLE
/*
    tween_stagger_to( targets_array, duration, vars, stagger);
    
    Tweens an array of targets to a common set of destination values (using 
    the current values as the start values), but staggers their start times by 
    a specified amount of time, creating an evenly-spaced sequence with a surprisingly
    small amount of code.
    
    The parameter stagger is the amount of time in seconds (or frames if the 
    timeline is frames-based) to stagger the start time of each tween.
    
    == Arguments:  
        targets_array: array of objects we want to tween
        duration: duration of the tween
        vars: propietries of the tween
        stagger: the time difference between each tween 
*/

//Perform the step event of the basic button (bb)
bb_step(button_tween);

// If the basic button fires the "on pressed" event:
if (bb_on_pressed(button_tween)) {
    
    // Stop the previous array of tweens
    tween_stop(tweens_array);

    // Tweens the obj_box1, obj_box2 and obj_box3 in 2.8 seconds to
    // x=800 and image_angle=270 with a elastic easing
    // and a 0.4 seconds gap between each tween 
    // the function retuns an array with the 3 tweens
    
    tweens_array = tween_stagger_to(array(obj_box1, obj_box2, obj_box3), 2.8,  array("x", 800,"angle",270, "ease", ease_backout), 0.4);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///READ THE STEP EVENT

// Perform the draw event of the basic button (bb)
bb_draw(button_tween);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
